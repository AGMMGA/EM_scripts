import os
import re
import shutil
import math
import sys
from genericpath import isfile

'''
filelist.txt is generated by UNIX command: find [starting_directory]-type f -name "*.mrc"
'''


micrographs_dir = '/processing/michael/20160308_nucleo_xlink_data2/relion/Micrographs'
data_folder = '/local_storage/michael/20160308_nucleo_xlink_data2/original_data/supervisor_20160308_164202/Images-Disc1'
try:
    assert os.path.isdir(micrographs_dir)
    assert os.path.isdir(data_folder)
except AssertionError:
    print ('Please make sure starting and destination directory exist')
    sys.exit()

project_name = '20160308_nucleo_xlink_data2'
folder_pattern = re.compile('/Data/FoilHole')
frames_pattern = re.compile('_n[0-6]')
micrographs = []
frames = True
overwrite = True
verbose = True
n_frames = 7

os.chdir(data_folder)
with open('filelist.txt') as f:
    for line in f:
        filename = os.path.join(data_folder,line[2:-1])
        root, ext = os.path.splitext(filename)
        if ext == '.mrc': #this should be a given, but let's check
            occ = re.findall(folder_pattern, line)
            if len(occ)>= 1: #it is an image of a hole
                frame = re.findall(frames_pattern, line)
                if filename.find('frames_n')==-1:
                    micrographs.append(filename)

with open('logfile.txt','w') as log:
    zeroes = math.ceil(math.log10(len(micrographs)))
    counter = 1
    for m in micrographs:
        file_number = str(counter).zfill(zeroes)
        new_micrograph_name = os.path.join(micrographs_dir, 
                '{0}_{1}.mrc'.format(project_name, file_number))
        
        shutil.copyfile(m, new_micrograph_name)
        if verbose:
            print ('{0} -> {1}\n'.format(m, new_micrograph_name))
        log.write('{0} -> {1}\n'.format(m, new_micrograph_name))
        
        # copying frames
        if frames:
            old_frame_name = m.split('.mrc')[0] + '_frames_n{}.mrc'
            for i in range(n_frames): #7 frames, starting from 0
                new_frame_name = new_micrograph_name .split('.mrc')[0] + \
                    '_frames_n{}.mrc'.format(i)
                if os.path.isfile(old_frame_name.format(i)):
                    shutil.copyfile(old_frame_name.format(i), new_frame_name)
                else:
                    log.write('Not found: {} to go with {}\n'.format(old_frame_name.format(i),
                            new_micrograph_name))
                if verbose:
                    print ('{0} -> {1}\n'.format(old_frame_name.format(i), new_frame_name.format(i)))
                log.write('{0} -> {1}\n'.format(old_frame_name.format(i), new_frame_name.format(i)))
        counter +=1